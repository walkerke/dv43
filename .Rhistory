)
}
)),
State = gsub(states,pattern="^\\s+",replacement="") #remove leading space
)
}
))
require(dplyr)
#use dplyr handy join to combine our new region data
#with prior df.melt data
dataPlot <- left_join(df.melt,statesRegions)
#now one other tiny issue is that with dimple
#handling colors with facets will be better handled
require(plyr)
dataPlot <- ddply(
dataPlot
,.(Division,Region,State,Ancestry)
,transform
,Share
)
d2 <- dPlot(
Share ~ State,
data = dataPlot,
groups = c("Ancestry"),
type = "bar"
,margins = list(left=60,top=20,right=20,bottom=20)
)
d2$yAxis(type = "addPctAxis")
d2$params$facet = list(x = "Region", y = NULL)
d2$templates$script =
#"../rCharts_dimple/chart_multiselect.html"
"http://timelyportfolio.github.io/rCharts_dimple/chart_multiselect.html"
#use d3 color scale
d2$params$defaultColors = "#!d3.scale.category10()!#"
#if you wanted to specify colors for each value
#d2$params$defaultColors = sprintf(
#  "#!d3.scale.category10().range(JSON.parse('%s')).domain(JSON.parse('%s'))!#"
#  ,toJSON(RColorBrewer::brewer.pal(n=9,"BuPu"))
#  ,toJSON(unique(dataPlot$Ancestry))
#)
d2
#now add some Angular goodness
d2$addControls(
"x",
value = d2$params$x,
values = colnames(dataPlot[-3])
)
d2$addControls(
"groups",
value = d2$params$groups,
values = colnames(dataPlot[-3])
)
d2$addControls(
"facetx",
value = "Region",
values = colnames(dataPlot[-3])
)
d2$addFilters("Ancestry")
d2
d2$params$facet = list( x = NULL, y = NULL, removeAxes = TRUE)
install.packages('dplyr')
devtools::install_github("hadley/dplyr")
installed.packages()
source('https://raw.github.com/timelyportfolio/teaching-with-datavis/master/hispanics-by-state.R')
d2
d1
source('~/Datavis/pyramids.R')
View(df)
nms <- c("year", "age", "total", "male", "female", "percent", "pctmale", "pctfemale", "sexratio")
names(df) <- nms
View(df)
df <- df[-(df$age == 'Total'), ]
View(df)
df[22, 3]
df[22, 2]
library(XML)
url <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y=2004,2014&R=-1&C=AJ"
df <- data.frame(readHTMLTable(url))
nms <- c("year", "age", "total", "male", "female", "percent", "pctmale", "pctfemale", "sexratio")
names(df) <- nms
df <- df[-(df$age == 'Total'), ]
df <- df[-(df$age == 'Total'), ]
View(df)
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
View(df)
View(df)
yrs <- c(2005, 2015)
c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="
c2 <- "&R=-1&C="
cn <- "CN"
tst <- paste0(as.character(yrs), c1, c2, cn)
tst
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
d1
library(rColorBrewer)
library(RColorBrewer)
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
d1
source('~/Datavis/pyramids.R')
d1
install.packages('grDevices')
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages('grDevices')
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
colorRampPalette(c("green", "purple"))
test <- colorRampPalette(c("green", "purple"))
test
library(grDevices)
t <- colorRampPalette(c("blue", "green"))
t
t(4)
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
View(dat)
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
d1
install.packages("countrycode")
library("countrycode")
b <- countrycode("France", "county.name", "fips104")
b <- countrycode("France", "country.name", "fips104")
countrycode("France", "country.name", "fips104")
countrycode("France", "country.name", "cowc")
countrycode("France", "country.name", "gec")
countrycode("France", "country.name", "iso2c")
countrycode("France", "country.name", "fips")
countrycode("France", "country.name", "fips104")
countrycode("France", "country.name", "un")
countrycode("France", "country.name", "fips102")
countrycode("France", "country.name", "fips104")
devtools::install_github('countrycode', 'vincentarelbundock')
library(countrycode)
countrycode("France", "country.name", "fips104")
countrycode("France", "country.name", "un")
library(countrycode)
countrycode('United States', 'country.name', 'fips104')
countrycode('France', 'country.name', 'fips104')
countrycode('United Kingdom', 'country.name', 'fips104')
source('~/Datavis/pyramids.R')
d1
source('~/Datavis/pyramids.R')
source('~/Datavis/pyramids.R')
d1
?if
)
?ifelse
library(XML)
library(reshape2)
library(rCharts)
library(RColorBrewer)
#library(grDevices)
getAgeTable <- function(country, years) {
c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="
c2 <- "&R=-1&C="
yrs <- gsub(" ", "", toString(years))
url <- paste0(c1, yrs, c2, country)
df <- data.frame(readHTMLTable(url))
nms <- c("year", "age", "total", "male", "female", "percent", "pctmale", "pctfemale", "sexratio")
names(df) <- nms
cols <- c(1, 3:9)
df[,cols] <- apply(df[,cols], 2, function(x) as.numeric(as.character(gsub(",", "", x))))
df <- df[df$age != 'Total', ]
ord <- 1:nrow(df)
df <- cbind(df, ord)
return(df)
}
# dat <- getAgeTable("QA", c(1994, 2004, 2014, 2024, 2034, 2044))
dat <- getAgeTable("QA", 2014)
dat$male <- -1 * dat$male
dat$gencode <- ifelse(dat$gender == 'male', 1, 2)
dat$gencode <- ifelse(dat$gender == 'male', c(1), c(2))
library(XML)
library(reshape2)
library(rCharts)
library(RColorBrewer)
#library(grDevices)
getAgeTable <- function(country, years) {
c1 <- "http://www.census.gov/population/international/data/idb/region.php?N=%20Results%20&T=10&A=separate&RT=0&Y="
c2 <- "&R=-1&C="
yrs <- gsub(" ", "", toString(years))
url <- paste0(c1, yrs, c2, country)
df <- data.frame(readHTMLTable(url))
nms <- c("year", "age", "total", "male", "female", "percent", "pctmale", "pctfemale", "sexratio")
names(df) <- nms
cols <- c(1, 3:9)
df[,cols] <- apply(df[,cols], 2, function(x) as.numeric(as.character(gsub(",", "", x))))
df <- df[df$age != 'Total', ]
ord <- 1:nrow(df)
df <- cbind(df, ord)
return(df)
}
# dat <- getAgeTable("QA", c(1994, 2004, 2014, 2024, 2034, 2044))
dat <- getAgeTable("QA", 2014)
dat$male <- -1 * dat$male
keep <- c("year", "age", "male", "female", "ord")
dat.sub <- dat[,keep]
dat.melt <- melt(dat.sub,
value.name='population',
variable.name = 'gender',
id.vars=c('age', 'ord', 'year') )
dat.melt$gencode <- ifelse(dat.melt$gender == 'male', 1, 2)
View(dat.melt)
class(dat.melt$gencode)
d1 <- dPlot(
x = "population",
y = "age",
groups = "gender",
data = dat.melt,
type = 'bar')
d1$yAxis(type = "addCategoryAxis", orderRule = "ord")
d1$xAxis(type = "addMeasureAxis"
#         , outputFormat = "#! function(d) {
#                         return d3.format(Math.abs(d));
#                         } !#"
)
# t <- colorRampPalette(brewer.pal(4, "BuPu"))
#
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "PuOr")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "BuPu")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = brewer.pal(n=5, "PRGn")
)
d1
d1$colorAxis(
type = "addColorAxis",
colorSeries = "gencode",
palette = c("yellow", "green")
)
d1
source('~/Datavis/dimple_pyramids.R')
source('~/Datavis/dimple_pyramids.R')
y <- dPyramids("UK", 2010, c("red", "blue"))
y <- dPyramid("UK", 2010, c("red", "blue"))
source('~/Datavis/dimple_pyramids.R')
y <- dPyramid("UK", 2010, c("red", "blue"))
y
y <- dPyramid("UK", 2010)
y
y <- dPyramid("UK", c(2010, 2015, 2020))
y
x <- rnorm(100, mean=0, sd=1)
y <- runif(100, -2, 2)
df <- data.frame(x, y)
library(rcharts)
library(rCharts)
n1 <- nPlot(y~x, data = df, type = "scatterPlot")
n1
n1 <- nPlot(y~x, data = df, type = "scatterChart")
n1
d1 <- dPlot(y~x, data = df, type = "bubble")
d1
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
d1 <- dPlot(x = "x", y = "y", data = df, type = "bubble")
d1$yAxis(type = "addMeasureAxis")
d1$xAxis(type = "addMeasureAxis")
d1
d1 <- dPlot(x = "x", y = "y", data = df, type = "bubble")
d1$yAxis(type = "addMeasureAxis")
d1
d1$xAxis(type = "addMeasureAxis")
d1
plot(df$x, df$y)
z <- rnorm(100, 0, 1)
d1 <- dPlot(x = "x", y = "z", data = df, type = "bubble")
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
library(rCharts)
Gamestatistics=read.csv("https://raw.github.com/patilv/dimplemusical/master/Gamestatisticscleaned.csv")
d4=dPlot(x= "Points.Per.Game", y="Assists.Per.Game",data = Gamestatistics,groups = c("Player"),
type = "bubble")
d4$yAxis(type="addMeasureAxis")
d4$xAxis(type="addMeasureAxis")
d4
library(rCharts)
s1 <- rnorm(100, 0, 1)
s2 <- rnorm(100, 0, 1)
group <- seq(1, 100, 4)
group <- rep(1:4, 25)
df <- data.frame(s1, s2, group)
d1 <- dPlot(s1~s2, group = "group", data=df, type="bubble")
d1$xAxis(type = "addMeasureAxis")
d1$yAxis(type = "addMeasureAxis")
d1
d1 <- nPlot(s1~s2, group = "group", data=df, type="scatterChart")
d1
source('~/Datavis/dimple_pyramids.R')
source('~/Datavis/dimple_pyramids.R')
dPyramid("US", seq(2005, 2045, 10), colors=c("red", "blue"))
source('~/Datavis/dimple_pyramids.R')
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
source('~/Datavis/dimple_pyramids.R')
dPyramid("IN", seq(2004, 2044, 10), colors=c("orange", "green"))
?rev
library(maptools)
library(ggmap)
library(RColorBrewer)
zips <- readShapePoly('C:/Users/kylewalker/Dropbox/Health project/Data/shape/Texas_2007_ZCTAs.shp')
choro <- rev(brewer.pal('RdBu', 5))
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 8,
color = "color",
source = "osm")
choro <- rev(brewer.pal(5, 'RdBu'))
basemap
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 7,
color = "color",
source = "osm")
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
ggmap(basemap)
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
basemap <- get_map(
location = c(lon = -99.547, lat = 31.293),
zoom = 6,
color = "color",
source = "osm")
ggmap(basemap)
plot(zips)
h1 <- hPlot(
rate ~ year,
data = hiv,
group = "country",
type = "line")
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
h1$save('C:/Users/kylewalker/Dropbox/Teaching with datavis/hiv.html', cdn = TRUE)
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
source('~/Teaching/World Regional/Data/hiv/hiv.R')
h1
setwd("C:/Users/kylewalker/Documents/Teaching/World Regional/Data")
require(rCharts)
require(RColorBrewer)
require(ggplot2)
dat <- read.csv("WPP2012_DB02_POPULATIONS_ANNUAL.CSV", header=TRUE)
dict <- read.csv("WPP2012_F01_LOCATIONS.CSV", header=TRUE)
global <- subset(dat, Location == "World" &
(Variant == "Low" |
Variant == "Medium" |
Variant == "High" |
Variant == "Constant fertility"),
select=c(Location, Variant, Time, PopTotal))
global$popBillions <- global$PopTotal / 1000000
values <- c("Africa", "Latin America and the Caribbean", "Northern America", "Europe", "Oceania", "Asia")
region <- subset(dat, (VarID == 2) & (Location %in% values),
select=c(LocID, Location, Time, PopTotal))
region$popBillions <- region$PopTotal / 1000000
###Area chart
c1 <- nPlot(popBillions~Time, group="Location", data=region, type="stackedAreaChart")
#c1colors <- brewer.pal(6, "Set2")
c1$colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f")
c1$chart(color = c1colors)
c1$yAxis(tickFormat= "#!d3.format(',.1f')!#")
c1$yAxis(axisLabel = "Population (billions)", width = 62)
c1$xAxis(axisLabel = "Year")
c1$chart(tooltipContent = "#! function(key, x, y){
return '<h3>' + key + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
setwd("C:/Users/kylewalker/Documents/Teaching/World Regional/Data")
require(rCharts)
require(RColorBrewer)
require(ggplot2)
dat <- read.csv("WPP2012_DB02_POPULATIONS_ANNUAL.CSV", header=TRUE)
dict <- read.csv("WPP2012_F01_LOCATIONS.CSV", header=TRUE)
global <- subset(dat, Location == "World" &
(Variant == "Low" |
Variant == "Medium" |
Variant == "High" |
Variant == "Constant fertility"),
select=c(Location, Variant, Time, PopTotal))
global$popBillions <- global$PopTotal / 1000000
values <- c("Africa", "Latin America and the Caribbean", "Northern America", "Europe", "Oceania", "Asia")
region <- subset(dat, (VarID == 2) & (Location %in% values),
select=c(LocID, Location, Time, PopTotal))
region$popBillions <- region$PopTotal / 1000000
###Area chart
c1 <- nPlot(popBillions~Time, group="Location", data=region, type="stackedAreaChart")
#c1colors <- brewer.pal(6, "Set2")
c1colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f")
c1$chart(color = c1colors)
c1$yAxis(tickFormat= "#!d3.format(',.1f')!#")
c1$yAxis(axisLabel = "Population (billions)", width = 62)
c1$xAxis(axisLabel = "Year")
c1$chart(tooltipContent = "#! function(key, x, y){
return '<h3>' + key + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
setwd("C:/Users/kylewalker/Documents/Teaching/World Regional/Data")
require(rCharts)
require(RColorBrewer)
require(ggplot2)
dat <- read.csv("WPP2012_DB02_POPULATIONS_ANNUAL.CSV", header=TRUE)
dict <- read.csv("WPP2012_F01_LOCATIONS.CSV", header=TRUE)
global <- subset(dat, Location == "World" &
(Variant == "Low" |
Variant == "Medium" |
Variant == "High" |
Variant == "Constant fertility"),
select=c(Location, Variant, Time, PopTotal))
global$popBillions <- global$PopTotal / 1000000
values <- c("Africa", "Latin America and the Caribbean", "Northern America", "Europe", "Oceania", "Asia")
region <- subset(dat, (VarID == 2) & (Location %in% values),
select=c(LocID, Location, Time, PopTotal))
region$popBillions <- region$PopTotal / 1000000
###Area chart
c1 <- nPlot(popBillions~Time, group="Location", data=region, type="stackedAreaChart")
c1colors <- brewer.pal(6, "Set2")
#c1colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f")
c1$chart(color = c1colors)
c1$yAxis(tickFormat= "#!d3.format(',.1f')!#")
c1$yAxis(axisLabel = "Population (billions)", width = 62)
c1$xAxis(axisLabel = "Year")
c1$chart(tooltipContent = "#! function(key, x, y){
return '<h3>' + key + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
c1
setwd("C:/Users/kylewalker/Documents/Teaching/World Regional/Data")
require(rCharts)
require(RColorBrewer)
require(ggplot2)
dat <- read.csv("WPP2012_DB02_POPULATIONS_ANNUAL.CSV", header=TRUE)
dict <- read.csv("WPP2012_F01_LOCATIONS.CSV", header=TRUE)
global <- subset(dat, Location == "World" &
(Variant == "Low" |
Variant == "Medium" |
Variant == "High" |
Variant == "Constant fertility"),
select=c(Location, Variant, Time, PopTotal))
global$popBillions <- global$PopTotal / 1000000
values <- c("Africa", "Latin America and the Caribbean", "Northern America", "Europe", "Oceania", "Asia")
region <- subset(dat, (VarID == 2) & (Location %in% values),
select=c(LocID, Location, Time, PopTotal))
region$popBillions <- region$PopTotal / 1000000
###Area chart
c1 <- nPlot(popBillions~Time, group="Location", data=region, type="stackedAreaChart")
c1colors <- brewer.pal(6, "Set2")
#c1colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f")
c1$chart(color = c1colors)
c1$yAxis(tickFormat= "#!d3.format(',.1f')!#")
c1$yAxis(axisLabel = "Population (billions)", width = 62)
c1$xAxis(axisLabel = "Year")
c1$chart(tooltipContent = "#! function(key, x, y){
return '<h3>' + key + '</h3>' +
'<p>' + y + ' billion in ' + x + '</p>'
} !#")
c1
c1$save('C:/Users/kylewalker/Dropbox/Teaching with datavis/world_projections.html', cdn=TRUE)
setwd("~/GitHub/dv43")
slidify::slidify('index.html')
slidify::slidify('index.html')
slidify::slidify('index.Rmd')
